1. try/catch
- 동기적 프로세스/함수 진행 시 에러 날 만한 곳을 감싸서 추가해줌
- 다만 비동기 함수 및 프로세스는 안해줘도 됨
2. 콜백함수 - if(err)
- 비동기 함수들은 이렇게 에러가 발생해도 프로세스가 멈추지는 않기 때문에 따로 조건을 줘서 진행시켜줌
3. 프로미스 - .catch((err) => {}) 
- 비동기여서 에러처리를 따로 안해줘도 프로세스가 멈추지는 않음
- 다만 catch처리 안해주면 에러가 매우 길게 나타남 해석이 매우 어려워짐
- 이후에 프로미스에 catch 안하면 프로세스 멈출 수도 있다고 예고해놓음 그래서 다음에도 사용가능하게 하려면 무조건 적어줘야함
4. 에러 한방 처리 방법 : process 객체에 이벤트 'uncaughtException'를 추가해주면 모든 에러가 이 곳으로 들어감
- 모든 코드를 try/catch로 감싸는건 번거로워서 사용
- 에러를 해결해주는 방안이 아니라 에러를 기록해주는 방안으로 생각해야함
- 에러 시 복구 코드를 이 에러한방처리 이벤트에 작성해주면 안됨
- 그럼 복구 코드가 동작하는 것을 노드가 보장해주지 않음 그래서 단순 기록용으로 씀

*** 프로세스 종료 방법 *** 
- 1. netstat -ano | findstr {포트} => 서버 종료
- 2. taskkill /pid {프로세스아이디} /f -> 프로세스 강제 종료
- {} : 입력 부분 
+ 프로세스아이디 : process.pid -> 프로세스아이디 나옴
